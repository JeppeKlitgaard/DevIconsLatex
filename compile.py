import json
from pathlib import Path
from dataclasses import dataclass
from string import digits

ICOMOON_JSON_PATH = Path("devicons") / "icomoon.json"

TEMPLATE_STY_HEAD = r"""%% Generated by github.com/JeppeKlitgaard/DevIconsLatex

% Identify this package.
\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{devicon}[Provides some DevIcons]

% Requirements to use.
\usepackage{fontspec}

% Define shortcut to load the devicon
\newfontfamily{\DI}{devicon}
% Generic command displaying an icon by its name.
\newcommand*{\devicon}[1]{{
  \DI\csname devicon@#1\endcsname

}}
"""

TEMPLATE_STY_TAIL = r"""
\endinput
"""


def remove_numbers(input: str) -> str:
    remove_digits = str.maketrans("", "", digits)
    return input.translate(remove_digits)


@dataclass
class Icon:
    name: str
    code: int

    def code_as_latex_hex(self) -> str:
        return '"' + hex(self.code)[2:].upper()

    def name_as_latex_name(self) -> str:
        name = "di"
        name += remove_numbers("".join([x.title() for x in self.name.split("-")]))

        return name

    def to_latex_command(self) -> str:
        command = r"\expandafter\def\csname devicon@"
        command += self.name
        command += r"\endcsname { \symbol{"
        command += self.code_as_latex_hex()
        command += "}} \def\\"
        command += self.name_as_latex_name()
        command += r" {{\DI\csname devicon@"
        command += self.name
        command += r"\endcsname}}"

        return command


icons: list[Icon] = []

with open(ICOMOON_JSON_PATH) as f:
    o = json.load(f)

for icon in o["icons"]:
    i = Icon(icon["properties"]["name"], icon["properties"]["code"])
    icons.append(i)

with open("devicons.sty", "w") as f:
    f.write(TEMPLATE_STY_HEAD)

    for icon in icons:
        f.write(icon.to_latex_command() + "\n")

    f.write(TEMPLATE_STY_TAIL)
